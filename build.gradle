plugins {
    id 'dev.architectury.loom' version '1.6-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    // forgix for merging jars
    id 'io.github.pacifistmc.forgix' version '1.2.9'
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version

    repositories {
        // Parchment mappings
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }

        // Cloth Config API
        maven { url "https://maven.shedaniel.me/" }

        // Mod Menu
        maven {
            name = "Terraformers"
            url = "https://maven.terraformersmc.com/"
        }
    }
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        // Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
        archivesName = "$rootProject.archives_name-$project.name"
    }

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        mappings loom.layered() {
            // Mojmap mappings
            officialMojangMappings()
            // Parchment mappings (it adds parameter mappings & javadoc)
            parchment("org.parchmentmc.data:parchment-${rootProject.minecraft_version}:${rootProject.parchment_version}@zip")
        }
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }

    // Configure Maven publishing.
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }

    // Put stuff from gradle.properties into the mod info
    processResources {
        def resourceTargets = [
            // Location of where to inject the properties

            // Properties for each of the loaders
            "fabric.mod.json",
            "quilt.mod.json",
            "META-INF/neoforge.mods.toml"
        ]

        def intoTargets = ["$buildDir/resources/main/"] // Location of the built resources folder

        // The left side is what gets replaced in the mod info and the right side is where to get it from in the gradle.properties
        def replaceProperties = [
                version: mod_version,
                github_link: github_link,
                issues_link: issues_link,
                mod_description: mod_description,
                modmenu_version: modmenu_version,
                cloth_config_version: cloth_config_version
        ]

        // replace any properties in the sub-projects with the values defined here
        inputs.properties replaceProperties
        replaceProperties.put "project", project
        filesMatching(resourceTargets) {
            expand replaceProperties
        }

        intoTargets.each {
            target ->
                if (file(target).exists()) {
                    copy {
                        from(sourceSets.main.resources) {
                            include resourceTargets
                            expand replaceProperties
                        }
                        into target
                    }
                }
        }
    }
}

forgix {
    group = "net.mob_armor_trims.majo24"
    mergedJarName = "mob_armor_trims-${project.mod_version}.jar"

    //TODO: figure out why jarLocation won't find the jars
    if (findProject(":fabric"))
        fabric {
            // jarLocation = "fabric/build/libs/mob_armor_trims-fabric-${project.mod_version}.jar"
        }
    if (findProject":neoforge")
        neoforge {
            // jarLocation = "neoforge/build/libs/mob_armor_trims-neoforge-${project.mod_version}.jar"
        }
}
